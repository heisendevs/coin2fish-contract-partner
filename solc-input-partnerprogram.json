{
    "language": "Solidity",
    "sources": {
        "./PartnerProgram.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./utils/Context.sol\";\n\npragma solidity 0.8.16;\n\n/**\n * @title Partner Program's Contract\n * @author HeisenDev\n */\ncontract PartnerProgram is Context {\n    using SafeMath for uint256;\n    uint256 partnerProgramTax = 2;\n    address private partnerProgramOwner;\n\n    struct Project {\n        address contractAddress;\n        address payable paymentsWallet;\n        uint256 partnerCommission;\n        uint256 partnerPremiumCommission;\n        address author;\n        string coinName;\n        string coinSymbol;\n        string website;\n        string twitter;\n        string telegram;\n        string discord;\n        bool isValue;\n    }\n\n    struct Partner {\n        string name;\n        string code;\n        address payable partnerAddress;\n        address payable managerAddress;\n        uint256 taxFeePartner;\n        uint256 taxFeeManager;\n        bool isValue;\n    }\n\n    mapping(string => Partner) public partners;\n    mapping(address => Project) public projects;\n\n    event Deposit(address sender, uint amount);\n    event NewPartner(string name, string code);\n    event UpdatePartner(string name, string code);\n    event NewProject(address contractAddress, string _coinName, string _coinSymbol, string website);\n    event UpdateProject(address contractAddress, string _coinName, string _coinSymbol, string website);\n\n    event PartnerProgramBUY(address indexed sender, address indexed _contract, string indexed _code, uint amount);\n\n\n    constructor(address _addr) {\n        partnerProgramOwner = payable(_addr);\n    }\n\n\n    /// @dev Fallback function allows to deposit ether.\n    receive() external payable {\n        if (msg.value > 0) {\n            emit Deposit(_msgSender(), msg.value);\n        }\n    }\n\n    function executePaymentsETH(address _contractAddress, string memory _code) internal {\n        uint256 amount = msg.value;\n        Project storage _project = projects[_contractAddress];\n        Partner storage _partner = partners[_code];\n        uint partnerTaxesAmount = amount.mul(_project.partnerCommission).div(100);\n        uint256 partnerAmount = partnerTaxesAmount.mul(_partner.taxFeePartner).div(100);\n        uint256 managerAmount = partnerTaxesAmount.mul(_partner.taxFeeManager).div(100);\n        uint256 partnerProgram = amount.mul(partnerProgramTax).div(100);\n        amount = amount.sub(partnerAmount);\n        amount = amount.sub(managerAmount);\n        amount = amount.sub(partnerProgram);\n        bool sent;\n        (sent,) = _partner.partnerAddress.call{value : partnerAmount}(\"\");\n        require(sent, \"Deposit ETH: failed to send ETH\");\n        (sent,) = _partner.managerAddress.call{value : managerAmount}(\"\");\n        require(sent, \"Deposit ETH: Failed to send ETH\");\n        (sent,) = partnerProgramOwner.call{value : partnerProgram}(\"\");\n        require(sent, \"Deposit ETH: Failed to send ETH\");\n        (sent,) = _project.paymentsWallet.call{value : amount}(\"\");\n        require(sent, \"Deposit ETH: Failed to send ETH\");\n    }\n\n    function executePaymentsTokens(address _contractAddress, string memory _code, uint256 _amount) internal {\n        Partner storage _partner = partners[_code];\n        uint256 partnerAmount = _amount.mul(_partner.taxFeePartner).div(100);\n        uint256 managerAmount = _amount.sub(partnerAmount);\n        IERC20 _token = IERC20(_contractAddress);\n        _token.transfer(_partner.partnerAddress, partnerAmount);\n        _token.transfer(_partner.managerAddress, managerAmount);\n    }\n    modifier isPartnerProgramContract(address _contractAddress) {\n        require(projects[_contractAddress].isValue, \"projects: project not exist\");\n        _;\n    }\n\n    modifier isPartnerProgramMember(string memory _code) {\n        require(partners[_code].isValue, \"Partners: code not exist\");\n        _;\n    }\n\n    function partnerProgramBUYTokens(uint _amount, string memory _code, address _contractAddress) external {\n        require(partners[_code].isValue, \"Partner Program BUY: code not exist\");\n        require(_amount > 0, \"PartnerProgramBUY: You deposit send at least some tokens\");\n        IERC20 _token = IERC20(_contractAddress);\n        uint256 allowance = _token.allowance(msg.sender, address(this));\n        require(allowance >= _amount, \"PartnerProgramBUY: Check the token allowance\");\n        _token.transferFrom(msg.sender, address(this), _amount);\n        executePaymentsTokens(_contractAddress, _code, _amount);\n        emit PartnerProgramBUY(_msgSender(), _contractAddress, _code, _amount);\n    }\n\n    function partnerProgramBUY(string memory _code, address _contractAddress) external payable isPartnerProgramMember(_code) isPartnerProgramContract(_contractAddress) {\n        require(msg.value > 0, \"You need to send some ether\");\n        executePaymentsETH(_contractAddress, _code);\n        emit PartnerProgramBUY(_msgSender(), _contractAddress, _code, msg.value);\n    }\n\n    function joinAsProject(\n        address _contractAddress,\n        address payable _paymentsWallet,\n        uint256 _partnerCommission,\n        uint256 _partnerPremiumCommission,\n        string memory _coinName,\n        string memory _coinSymbol,\n        string memory _website,\n        string memory _twitter,\n        string memory _telegram,\n        string memory _discord) external {\n        require(msg.sender == tx.origin, \"New Project: contracts not allowed here\");\n        require(_partnerCommission > 0, \"New Project: commission must be greater than zero\");\n        require(_partnerCommission <= 30, \"New Project: partner commission must keep 30% or less\");\n        require(!projects[_contractAddress].isValue, \"New Project: project already exists\");\n        IERC20 _token = IERC20(_contractAddress);\n        require(_token.owner() == _msgSender(), \"New Project: caller is not the owner\");\n        projects[_contractAddress] = Project({\n        contractAddress : _contractAddress,\n        paymentsWallet : _paymentsWallet,\n        partnerCommission : _partnerCommission,\n        partnerPremiumCommission : _partnerPremiumCommission,\n        author : _msgSender(),\n        coinName : _coinName,\n        coinSymbol : _coinSymbol,\n        website : _website,\n        twitter : _twitter,\n        telegram : _telegram,\n        discord : _discord,\n        isValue : true\n        });\n        emit NewProject(_contractAddress, _coinName, _coinSymbol, _website);\n    }\n    function updateProject (\n        address _contractAddress,\n        address payable _paymentsWallet,\n        uint256 _partnerCommission,\n        uint256 _partnerPremiumCommission,\n        string memory _coinName,\n        string memory _coinSymbol,\n        string memory _website,\n        string memory _twitter,\n        string memory _telegram,\n        string memory _discord) external {\n        require(msg.sender == tx.origin, \"Update Project: contracts not allowed here\");\n        require(msg.sender == tx.origin, \"Update Project: projects not allowed here\");\n        require(_partnerCommission > 0, \"Update Project: commission must be greater than zero\");\n        require(_partnerCommission <= 30, \"Update Project: partner commission must keep 30% or less\");\n        IERC20 _token = IERC20(_contractAddress);\n        require(_token.owner() == _msgSender(), \"New Project: caller is not the owner\");\n        projects[_contractAddress] = Project({\n        contractAddress : _contractAddress,\n        paymentsWallet : _paymentsWallet,\n        partnerCommission : _partnerCommission,\n        partnerPremiumCommission : _partnerPremiumCommission,\n        author : _msgSender(),\n        coinName : _coinName,\n        coinSymbol : _coinSymbol,\n        website : _website,\n        twitter : _twitter,\n        telegram : _telegram,\n        discord : _discord,\n        isValue : true\n        });\n        emit UpdateProject(_contractAddress, _coinName, _coinSymbol, _website);\n    }\n\n    function joinAsPartner(\n        string memory _name,\n        string memory _code,\n        address payable _partnerAddress,\n        address payable _managerAddress,\n        uint256 _taxFeePartner,\n        uint256 _taxFeeManager) external {\n        require(!partners[_code].isValue, \"Partners: code already exists\");\n        require(_taxFeePartner + _taxFeeManager == 100, \"The sum of the taxes must be 100\");\n        partners[_code] = Partner({\n        name : _name,\n        code : _code,\n        partnerAddress : _partnerAddress,\n        managerAddress : _managerAddress,\n        taxFeePartner : _taxFeePartner,\n        taxFeeManager : _taxFeeManager,\n        isValue : true\n        });\n        emit NewPartner(_name, _code);\n    }\n\n    function updatePartner(\n        string memory _name,\n        string memory _code,\n        address payable  _partnerAddress,\n        address payable _managerAddress,\n        uint256 _taxFeePartner,\n        uint256 _taxFeeManager) external {\n        Partner storage _partner = partners[_code];\n        require(_partner.partnerAddress == _msgSender() , \"Partners: only Partner can change the data\");\n        require(_taxFeePartner + _taxFeeManager == 100, \"The sum of the taxes must be 100\");\n        partners[_code] = Partner({\n        name : _name,\n        code : _code,\n        partnerAddress : _partnerAddress,\n        managerAddress : _managerAddress,\n        taxFeePartner : _taxFeePartner,\n        taxFeeManager : _taxFeeManager,\n        isValue : true\n        });\n        emit UpdatePartner(_name, _code);\n    }\n    function ownerPayment(address _contractAddress, uint256 _amount) external {\n        IERC20 _token = IERC20(_contractAddress);\n        _token.transfer(partnerProgramOwner, _amount);\n        (bool sent,) = partnerProgramOwner.call{value : address(this).balance}(\"\");\n        require(sent, \"recover ETH: Failed to send ETH\");\n    }\n}\n"
        },
        "./interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function owner() external view returns (address);\n    function name() external view returns (string calldata);\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "./libraries/SafeMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeMath\n * @dev Wrappers over Solidity's arithmetic operations.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
        },
        "./utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}